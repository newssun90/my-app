{"version":3,"sources":["logo.svg","User.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","User","react_default","a","createElement","className","User_UserPicture","picture","this","props","username","gender","phone","email","Component","UserPicture","src","title","alt","App","state","_getUsers","_callee","users","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","console","log","setState","stop","fetch","then","results","json","jsonData","catch","err","_renderUsers","map","user","index","src_User_0","login","large","key","uuid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gNCSlCC,sMAWJ,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,QAASC,KAAKC,MAAMF,QAASG,SAAUF,KAAKC,MAAMC,WAC/DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMC,UAChBR,EAAAC,EAAAC,cAAA,SAAII,KAAKC,MAAME,QACfT,EAAAC,EAAAC,cAAA,SAAII,KAAKC,MAAMG,OACfV,EAAAC,EAAAC,cAAA,SAAII,KAAKC,MAAMI,iBAnBFC,cA2BbC,mLAEJ,OACCb,EAAAC,EAAAC,cAAA,OAAKY,IAAKR,KAAKC,MAAMF,QAASU,MAAOT,KAAKC,MAAMC,SAAUQ,IAAKV,KAAKC,MAAMC,SAAUL,UAAU,wBAHvES,aA6BXb,ICjBAkB,6MAzCbC,MAAQ,KAMRC,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACJP,EADIG,EAAAK,KAEVC,QAAQC,IAAIV,GACZM,EAAKK,SAAS,CACZX,UAJQ,wBAAAG,EAAAS,SAAAb,QAUZQ,SAAW,WAET,OAAOM,MAAM,gDACZC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAG,GAAQ,OAAIA,EAASF,UAC1BG,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAG5BC,aAAe,WAIb,OAHcd,EAAKT,MAAMG,MAAMqB,IAAI,SAACC,EAAMC,GACxC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAMrC,SAAUmC,EAAKG,MAAMtC,SAAUH,QAASsC,EAAKtC,QAAQ0C,MAAOtC,OAAQkC,EAAKlC,OAAQC,MAAOiC,EAAKjC,MAAOC,MAAOgC,EAAKhC,MAAOqC,IAAKL,EAAKG,MAAMG,6FAvBtJ3C,KAAKa,6CA4BE,IACCE,EAAUf,KAAKY,MAAfG,MACR,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAWkB,EAAQ,MAAQ,gBAC7Bf,KAAKY,MAAMG,MAAQf,KAAKmC,eAAiB,qBArChC7B,aCOEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.82c89b38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './User.css';\r\n\r\n//MOVIE API URL : https://yts.ag/api/v2/list_movies.json?quality=3D\r\n/*\r\n\tClass Component\r\n\tuse state, function redner, lifecycling\r\n*/\r\nclass User extends Component {\r\n\r\n\tstatic propTypes = {\r\n\t\tusername: PropTypes.string.isRequired,\r\n\t\tpicture: PropTypes.string.isRequired,\r\n\t\tgender: PropTypes.string.isRequired,\r\n\t\tphone: PropTypes.string.isRequired,\r\n\t\temail: PropTypes.string.isRequired\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"user\">\r\n\t\t\t\t<UserPicture picture={this.props.picture} username={this.props.username} />\r\n\t\t\t\t<div className=\"user_columns\">\r\n\t\t\t\t\t<div className=\"user_detail\">\r\n\t\t\t\t\t\t<h4>{this.props.username}</h4>\r\n\t\t\t\t\t\t<p>{this.props.gender}</p>\r\n\t\t\t\t\t\t<p>{this.props.phone}</p>\r\n\t\t\t\t\t\t<p>{this.props.email}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass UserPicture extends Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<img src={this.props.picture} title={this.props.username} alt={this.props.username} className=\"user_picture\" />\r\n\t\t)\r\n\t}\r\n}\r\n\r\n/*\r\n\tFunctional Component\r\n\tjust return\r\n\tcan not use state, function render, lifecycling\r\nfunction Movie({title, poster}){\r\n\treturn (\r\n\t\t<div style={{borderTop:'1px solid #ccc'},{background:'lightBlue'}}>\r\n\t\t\t<span style={{textAlign:'center'}}>{title}</span>\r\n\t\t\t<br/>\r\n\t\t\t<MoviePoster poster={poster} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster({poster}) {\r\n\treturn (\r\n\t\t<img src={poster} alt=\"Movie Poster\" width=\"400px\" height=\"150px\" />\r\n\t)\r\n}\r\n*/\r\n\r\nexport default User;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport User from './User';\n\nclass App extends Component {\n\n  state = {};\n\n  componentDidMount(){\n    this._getUsers();\n  }\n\n  _getUsers = async () => {\n    const users = await this._callApi();\n    console.log(users)\n    this.setState({\n      users\n    });\n    //await (async 안쓰면 await 작동안함)\n    //set setate는 _callApi 작업이 완료되기 전까지는 실행되지 않는다.\n  }\n\n  _callApi = () => {\n    //get url with AJAX\n    return fetch('https://randomuser.me/api/?results=10&nat=us')\n    .then(results => results.json())\n    .then(jsonData => jsonData.results)\n    .catch(err => console.log(err))\n  }\n\n  _renderUsers = () => {\n    const users = this.state.users.map((user, index) => {\n      return <User username={user.login.username} picture={user.picture.large} gender={user.gender} phone={user.phone} email={user.email} key={user.login.uuid} />\n    })\n    return users;\n  }\n  \n  render() {\n    const { users } = this.state;\n    return (\n      <div className={users ? \"App\" : \"APP--loading\"}>\n        {this.state.users ? this._renderUsers() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}